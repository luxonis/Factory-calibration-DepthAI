#!/usr/bin/env python

import os
import sys
import copy
import pygame
from pygame.locals import *
from math import pi
import time
import warnings
import signal

import rosservice
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
from calibration.srv import Capture

os.environ['SDL_VIDEO_WINDOW_POS'] = '1000,50'

white  = [255, 255, 255]
orange = [143, 122, 4]
red    = [230, 9, 9]
green  = [4, 143, 7]
black  = [0, 0, 0]
pygame.init()

def pygame_render_text(surface, text, pose, color=(0,0,0), font_size = 30 ):
    font = pygame.font.Font(None, font_size)
    font_surf = font.render(text, True, color)
    surface.blit(font_surf, pose)


def all_close(goal, actual, tolerance):
  """
  Convenience method for testing if a list of values are within a tolerance of their counterparts in another list
  @param: goal       A list of floats, a Pose or a PoseStamped
  @param: actual     A list of floats, a Pose or a PoseStamped
  @param: tolerance  A float
  @returns: bool
  """
  all_equal = True
  if type(goal) is list:
    for index in range(len(goal)):
      if abs(actual[index] - goal[index]) > tolerance:
        return False

  elif type(goal) is geometry_msgs.msg.PoseStamped:
    return all_close(goal.pose, actual.pose, tolerance)

  elif type(goal) is geometry_msgs.msg.Pose:
    return all_close(pose_to_list(goal), pose_to_list(actual), tolerance)

  return True

class MoveGroupPythonIntefaceTutorial(object):
  """MoveGroupPythonIntefaceTutorial"""
  def __init__(self):
    super(MoveGroupPythonIntefaceTutorial, self).__init__()
    ## BEGIN_SUB_TUTORIAL setup
    ##
    ## First initialize `moveit_commander`_ and a `rospy`_ node:
    moveit_commander.roscpp_initialize(sys.argv)
    rospy.init_node('move_group_python_interface_tutorial',
                    anonymous=True)

    print("waiting for service--------------------------------->")
    rospy.wait_for_service('/capture_checkerboard')

    try:
      self.capture_srv = rospy.ServiceProxy('/capture_checkerboard', Capture)  
      self.calibrate_srv = rospy.ServiceProxy('/calibrate_stereo', Capture)  

    except rospy.ServiceException as e:
      print("Service call failed: %s"%e)

    ## Get the name of the robot - this will be used to properly define the end-effector link when adding a box
    robot_name = rospy.get_param("~robot_name")
    self.robot_name = robot_name

    ## Get the dof of the robot - this will make sure that the right number of joints are controlled
    dof = rospy.get_param("~dof")
    self.dof = dof

    ## Instantiate a `RobotCommander`_ object. This object is the outer-level interface to
    ## the robot:
    robot = moveit_commander.RobotCommander()

    ## Instantiate a `PlanningSceneInterface`_ object.  This object is an interface
    ## to the world surrounding the robot:
    scene = moveit_commander.PlanningSceneInterface()

    ## Instantiate a `MoveGroupCommander`_ object.  This object is an interface
    ## to one group of joints.  In this case the group is the joints in the Interbotix
    ## arm so we set ``group_name = interbotix_arm``. If you are using a different robot,
    ## you should change this value to the name of your robot arm planning group.
    ## This interface can be used to plan and execute motions on the Interbotix Arm:
    group_name = "interbotix_arm"
    group = moveit_commander.MoveGroupCommander(group_name)
    group.set_planner_id("TRRT") # works better some times
    # group.set_planner_id("PRM") 
    
    ## We create a `DisplayTrajectory`_ publisher which is used later to publish
    ## trajectories for RViz to visualize:
    display_trajectory_publisher = rospy.Publisher("move_group/display_planned_path",
                                                   moveit_msgs.msg.DisplayTrajectory,
                                                   queue_size=20)

    ## ^^^^^^^^^^^^^^^^^^^^^^^^^
    # We can get the name of the reference frame for this robot:
    planning_frame = group.get_planning_frame()
    print "============ Reference frame: %s" % planning_frame

    # We can also print the name of the end-effector link for this group:
    eef_link = group.get_end_effector_link()
    print "============ End effector: %s" % eef_link

    # We can get a list of all the groups in the robot:
    group_names = robot.get_group_names()
    print "============ Robot Groups:", robot.get_group_names()

    # Sometimes for debugging it is useful to print the entire state of the
    # robot:
    print "============ Printing robot state"
    print robot.get_current_state()

    print ""
    ## END_SUB_TUTORIAL

    # Misc variables
    self.box_name = ''
    self.robot = robot
    self.scene = scene
    self.group = group
    self.display_trajectory_publisher = display_trajectory_publisher
    self.planning_frame = planning_frame
    self.eef_link = eef_link
    self.group_names = group_names

  def go_to_next_joint_state(self, joints_state):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group
    dof = self.dof
    ## BEGIN_SUB_TUTORIAL plan_to_joint_state
    ##
    ## Planning to a Joint Goal
    ## ^^^^^^^^^^^^^^^^^^^^^^^^

    joint_goal = group.get_current_joint_values()
    joint_goal[0] =joints_state[0]
    joint_goal[1] =joints_state[1]

    joint_goal[2] =joints_state[2]
    joint_goal[3] =joints_state[3]

    if dof >= 5:
      joint_goal[4] =joints_state[4]
    if dof >= 6:
      joint_goal[5] = joints_state[5]
            # The go command can be called with joint values, poses, or without any
    # parameters if you have already set the pose or joint target for the group
    group.go(joint_goal, wait=True)

    # Calling ``stop()`` ensures that there is no residual movement
    group.stop()

    ## END_SUB_TUTORIAL

    # For testing:
    # Note that since this section of code will not be included in the tutorials
    # we use the class variable rather than the copied state variable
    current_joints = self.group.get_current_joint_values()
    print("currrent Joints------------------ ->")
    print(current_joints)
    return all_close(joint_goal, current_joints, 0.01)

  def get_current_joint_values(self):
    return self.group.get_current_joint_values()
    
  def capture_srv_client_handler(self, file_id):
    try:
      response = self.capture_srv(file_id)
      return response
    except rospy.ServiceException as e:
      print("Service call failed: %s"%e)

  def calibrate_srv_client_handler(self):
    try:
      response = self.calibrate_srv("charuco")
      return response
    except rospy.ServiceException as e:
      print("Service call failed: %s"%e)

  def go_to_joint_state(self):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group
    dof = self.dof
    ## BEGIN_SUB_TUTORIAL plan_to_joint_state
    ##
    ## Planning to a Joint Goal
    ## ^^^^^^^^^^^^^^^^^^^^^^^^

    joint_goal = group.get_current_joint_values()
    joint_goal[0] = 0
    joint_goal[1] = -pi/4
    joint_goal[2] = 0
    joint_goal[3] = -pi/2
    if dof >= 5:
        joint_goal[4] = 0
    if dof >= 6:
        joint_goal[5] = pi/3

    # The go command can be called with joint values, poses, or without any
    # parameters if you have already set the pose or joint target for the group
    group.go(joint_goal, wait=True)

    # Calling ``stop()`` ensures that there is no residual movement
    group.stop()

    ## END_SUB_TUTORIAL

    # For testing:
    # Note that since this section of code will not be included in the tutorials
    # we use the class variable rather than the copied state variable
    current_joints = self.group.get_current_joint_values()
    # print(current_pose)
    current_pose = self.group.get_current_pose().pose
    print("currrent pose in go_to_joint_state------------------ ->")
    print(current_pose)
    return all_close(joint_goal, current_joints, 0.01)


  def go_to_pose_goal(self):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group
    robot_name = self.robot_name
    ## BEGIN_SUB_TUTORIAL plan_to_pose
    ##
    ## Planning to a Pose Goal
    ## ^^^^^^^^^^^^^^^^^^^^^^^
    ## We can plan a motion for this group to a desired pose for the
    ## end-effector:
    pose_goal = geometry_msgs.msg.Pose()
    pose_goal.orientation.w = 1.0
    if robot_name == "px100":
        pose_goal.position.x = 0.1
        pose_goal.position.z = 0.15
    else:
        pose_goal.position.x = 0
        pose_goal.position.z = 0.5
        pose_goal.position.y = 0.7
    group.set_pose_target(pose_goal)

    ## Now, we call the planner to compute the plan and execute it.
    plan = group.go(wait=True)
    # Calling `stop()` ensures that there is no residual movement
    group.stop()
    # It is always good to clear your targets after planning with poses.
    # Note: there is no equivalent function for clear_joint_value_targets()
    group.clear_pose_targets()

    ## END_SUB_TUTORIAL

    # For testing:
    # Note that since this section of code will not be included in the tutorials
    # we use the class variable rather than the copied state variable
    current_pose = self.group.get_current_pose().pose
    print("currrent pose------------------ ->")
    print(current_pose)
    # end_effector_ = robot.get_end_effector_link
    # self.group.get
    return all_close(pose_goal, current_pose, 0.01)

  def set_go_pose_goal(self, pose_goal):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group
    robot_name = self.robot_name
    ## BEGIN_SUB_TUTORIAL plan_to_pose
    ##
    ## Planning to a Pose Goal
    ## ^^^^^^^^^^^^^^^^^^^^^^^
    ## We can plan a motion for this group to a desired pose for the
    ## end-effector:

    group.set_pose_target(pose_goal)

    ## Now, we call the planner to compute the plan and execute it.
    plan = group.go(wait=True)
    # Calling `stop()` ensures that there is no residual movement
    group.stop()
    # It is always good to clear your targets after planning with poses.
    # Note: there is no equivalent function for clear_joint_value_targets()
    group.clear_pose_targets()

    ## END_SUB_TUTORIAL

    # For testing:
    # Note that since this section of code will not be included in the tutorials
    # we use the class variable rather than the copied state variable
    current_pose = self.group.get_current_pose().pose
    print("currrent pose------------------ ->")
    print(current_pose)
    current_joints = self.group.get_current_joint_values()
    print("currrent Joints------------------ ->")
    print(current_joints)

    # end_effector_ = robot.get_end_effector_link
    # self.group.get
    return all_close(pose_goal, current_pose, 0.01)


  def get_curr_pose(self):
    current_pose = self.group.get_current_pose().pose
    print("currrent pose------------------ ->")
    print(current_pose)

  def plan_cartesian_path(self, scale=1):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group

    ## BEGIN_SUB_TUTORIAL plan_cartesian_path
    ##
    ## Cartesian Paths
    ## ^^^^^^^^^^^^^^^
    ## You can plan a Cartesian path directly by specifying a list of waypoints
    ## for the end-effector to go through:
    ##
    waypoints = []

    wpose = group.get_current_pose().pose
    wpose.position.z += scale * 0.1  # First move up (z)
    waypoints.append(copy.deepcopy(wpose))

    wpose.position.x += scale * 0.1  # Second move forward in (x)
    waypoints.append(copy.deepcopy(wpose))

    wpose.position.z -= scale * 0.1  # Third move down (z)
    waypoints.append(copy.deepcopy(wpose))

    # We want the Cartesian path to be interpolated at a resolution of 1 cm
    # which is why we will specify 0.01 as the eef_step in Cartesian
    # translation.  We will disable the jump threshold by setting it to 0.0 disabling:
    (plan, fraction) = group.compute_cartesian_path(
                                       waypoints,   # waypoints to follow
                                       0.01,        # eef_step
                                       0.0)         # jump_threshold

    # Note: We are just planning, not asking move_group to actually move the robot yet:
    return plan, fraction

    ## END_SUB_TUTORIAL

  def display_trajectory(self, plan):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    robot = self.robot
    display_trajectory_publisher = self.display_trajectory_publisher

    ## BEGIN_SUB_TUTORIAL display_trajectory
    ##
    ## Displaying a Trajectory
    ## ^^^^^^^^^^^^^^^^^^^^^^^
    ## You can ask RViz to visualize a plan (aka trajectory) for you. But the
    ## group.plan() method does this automatically so this is not that useful
    ## here (it just displays the same trajectory again):
    ##
    ## A `DisplayTrajectory`_ msg has two primary fields, trajectory_start and trajectory.
    ## We populate the trajectory_start with our current robot state to copy over
    ## any AttachedCollisionObjects and add our plan to the trajectory.
    display_trajectory = moveit_msgs.msg.DisplayTrajectory()
    display_trajectory.trajectory_start = robot.get_current_state()
    display_trajectory.trajectory.append(plan)
    # Publish
    display_trajectory_publisher.publish(display_trajectory);

    ## END_SUB_TUTORIAL

  def execute_plan(self, plan):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    group = self.group

    ## BEGIN_SUB_TUTORIAL execute_plan
    ##
    ## Executing a Plan
    ## ^^^^^^^^^^^^^^^^
    ## Use execute if you would like the robot to follow
    ## the plan that has already been computed:
    group.execute(plan, wait=True)

    ## **Note:** The robot's current joint state must be within some tolerance of the
    ## first waypoint in the `RobotTrajectory`_ or ``execute()`` will fail
    ## END_SUB_TUTORIAL

  def wait_for_state_update(self, box_is_known=False, box_is_attached=False, timeout=4):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    box_name = self.box_name
    scene = self.scene

    ## BEGIN_SUB_TUTORIAL wait_for_scene_update
    ##
    ## Ensuring Collision Updates Are Receieved
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ## If the Python node dies before publishing a collision object update message, the message
    ## could get lost and the box will not appear. To ensure that the updates are
    ## made, we wait until we see the changes reflected in the
    ## ``get_known_object_names()`` and ``get_known_object_names()`` lists.
    ## For the purpose of this tutorial, we call this function after adding,
    ## removing, attaching or detaching an object in the planning scene. We then wait
    ## until the updates have been made or ``timeout`` seconds have passed
    start = rospy.get_time()
    seconds = rospy.get_time()
    while (seconds - start < timeout) and not rospy.is_shutdown():
      # Test if the box is in attached objects
      attached_objects = scene.get_attached_objects([box_name])
      is_attached = len(attached_objects.keys()) > 0

      # Test if the box is in the scene.
      # Note that attaching the box will remove it from known_objects
      is_known = box_name in scene.get_known_object_names()
      # Test if we are in the expected state
      if (box_is_attached == is_attached) and (box_is_known == is_known):
        return True

      # Sleep so that we give other threads time on the processor
      rospy.sleep(0.1)
      seconds = rospy.get_time()

    # If we exited the while loop without returning then we timed out
    return False
    ## END_SUB_TUTORIAL

  def add_box(self, box_name, pose, dim,  timeout=4):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    robot_name = self.robot_name
    # box_name = self.box_name
    scene = self.scene

    ## BEGIN_SUB_TUTORIAL add_box
    ##
    ## Adding Objects to the Planning Scene
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ## First, we will create a box in the planning scene at the location of the left finger:
    box_pose = geometry_msgs.msg.PoseStamped()
    box_pose.header.frame_id = robot_name + "/base_link"
    box_pose.pose.orientation.w = 1.0
    box_pose.pose.position.z = pose[2] 
    box_pose.pose.position.x = pose[0]
    box_pose.pose.position.y = pose[1]

    ## END_SUB_TUTORIAL
    # Copy local variables back to class variables. In practice, you should use the class
    # variables directly unless you have a good reason not to.
    self.box_name=box_name
    self.scene.add_box(box_name, box_pose, size=dim)
    return self.wait_for_state_update(box_is_known=True, timeout=timeout)


  def attach_box(self, timeout=4):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    box_name = self.box_name
    robot = self.robot
    scene = self.scene
    eef_link = self.eef_link
    group_names = self.group_names

    ## BEGIN_SUB_TUTORIAL attach_object
    ##
    ## Attaching Objects to the Robot
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ## Next, we will attach the box to the Arm's wrist. Manipulating objects requires the
    ## robot be able to touch them without the planning scene reporting the contact as a
    ## collision. By adding link names to the ``touch_links`` array, we are telling the
    ## planning scene to ignore collisions between those links and the box. For the Interbotix
    ## robot, we set ``grasping_group = 'interbotix_gripper'``. If you are using a different robot,
    ## you should change this value to the name of your end effector group name.
    grasping_group = 'interbotix_gripper'
    touch_links = robot.get_link_names(group=grasping_group)
    scene.attach_box(eef_link, box_name, touch_links=touch_links)
    ## END_SUB_TUTORIAL

    # We wait for the planning scene to update.
    return self.wait_for_state_update(box_is_attached=True, box_is_known=False, timeout=timeout)

  def detach_box(self, timeout=4):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    box_name = self.box_name
    scene = self.scene
    eef_link = self.eef_link

    ## BEGIN_SUB_TUTORIAL detach_object
    ##
    ## Detaching Objects from the Robot
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ## We can also detach and remove the object from the planning scene:
    scene.remove_attached_object(eef_link, name=box_name)
    ## END_SUB_TUTORIAL

    # We wait for the planning scene to update.
    return self.wait_for_state_update(box_is_known=True, box_is_attached=False, timeout=timeout)

  def remove_box(self, timeout=4):
    # Copy class variables to local variables to make the web tutorials more clear.
    # In practice, you should use the class variables directly unless you have a good
    # reason not to.
    box_name = self.box_name
    scene = self.scene

    ## BEGIN_SUB_TUTORIAL remove_object
    ##
    ## Removing Objects from the Planning Scene
    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    ## We can remove the box from the world.
    scene.remove_world_object(box_name)

    ## **Note:** The object must be detached before we can remove it from the world
    ## END_SUB_TUTORIAL

    # We wait for the planning scene to update.
    return self.wait_for_state_update(box_is_attached=False, box_is_known=False, timeout=timeout)

def shutdown_handler():
  
  print("~~~~~~~~~~~~~~~Finishing up~~~~~~~~~~~~~~~~")
  if arm_control is not None:
    print("Moving to sleep pose -->")
    arm_control.go_to_next_joint_state(sleep_pose)
    rospy.sleep(2)
  # sys.exit(0)

def change_device_render():
  text = "Change the device or reconnect the device"
  pygame_render_text(screen, text, (150,200), green, 30)
  text = "and click on \"YES\" to calibrate"
  pygame_render_text(screen, text, (150,235), green, 30)
  # text = " click on \"Exit\" to finish calibration"
  # pygame_render_text(screen, text, (150,270), green, 30)


def capture_calibrate_continue():
  pygame.draw.rect(screen, orange, yes_button)
  pygame_render_text(screen, 'Yes', (415, 405))
  is_clicked = False
  yes_active = False
  no_active = False
  while not is_clicked:
    disp.update()
    for event in pygame.event.get():
      if event.type == pygame.MOUSEMOTION:
        x, y = event.pos
        px, py, w, h = yes_button
        if px < x < px + w and py < y < py + h:
          yes_active = True
          pygame.draw.rect(screen, green, yes_button)
          pygame_render_text(screen, 'Yes', (415, 405))
        else:
          yes_active = False
          pygame.draw.rect(screen, orange, yes_button)
          pygame_render_text(screen, 'Yes', (415, 405))
        px, py, w, h = no_button
        if px < x < px + w and py < y < py + h:
          no_active = True
          pygame.draw.rect(screen, orange, no_button)
          pygame_render_text(screen, 'Exit', (500, 505))
        else:
          no_active = False
          pygame.draw.rect(screen, red, no_button)
          pygame_render_text(screen, 'Exit', (500, 505))

      if event.type == pygame.MOUSEBUTTONDOWN and (yes_active or no_active):
        print("setting click")
        click = True
      if event.type == pygame.MOUSEBUTTONUP:
        print("button up")
        if yes_active and click:
          print("yes clicked")
          is_clicked = True
          return True
          break
        if no_active and click:
          print("No clicked")
          is_clicked = True
          is_device_ready = False
          arm_control.go_to_next_joint_state(sleep_pose)
          return False
          break

  return True
  # return is_device_ready


def capture_exit():
  is_clicked = False
  no_active = False
  for event in pygame.event.get():
    if event.type == pygame.MOUSEMOTION:
      x, y = event.pos
      px, py, w, h = no_button
      if px < x < px + w and py < y < py + h:
          no_active = True
          pygame.draw.rect(screen, orange, no_button)
          pygame_render_text(screen, 'Exit', (500, 505))
      else:
          no_active = False
          pygame.draw.rect(screen, red, no_button)
          pygame_render_text(screen, 'Exit', (500, 505))
  
    if event.type == pygame.MOUSEBUTTONDOWN and no_active:
        print("setting click")
        click = True
    if event.type == pygame.MOUSEBUTTONUP:
        if no_active and click:
          print("No clicked")
          is_clicked = True
          # is_device_ready = False
          # if arm_control is not None:
            # arm_control.go_to_next_joint_state(joints_goal_dict['sleep'])
          break
  pygame.event.pump()
  return is_clicked

def check_service(service_name):
  relpace_rect =  pygame.Rect(150, 115, 500, 35)
  pygame.draw.rect(screen, white, relpace_rect)
  is_exit = False
  while True:
    is_exit = capture_exit()
    service_list = rosservice.get_service_list()
    print(service_list)
    if service_name in service_list:
      break
    else :
      dev = service_name + " doesn't exist check if calibration node is running!!"
      pygame_render_text(screen, dev, (200,115), red, 30)
    
    if is_exit:
      break
    disp.update()
  return is_exit


def main():
  global screen, disp, arm_control
  rospy.on_shutdown(shutdown_handler)
  # signal.signal(signal.SIGINT, shutdown_handler)
  is_device_ready = True
  delay = 0.5
  arm_control = MoveGroupPythonIntefaceTutorial()
  # creating a dict of all the joints pose of the arm. Some are redundant here
  joints_goal_dict = {
      'start'    : [0,0,0,0,0,0],
      'left_1'   : [0.7730087577658563, 0.3276961983717477, 0.401425728, 1.7006072182394685, 1.4454714320379867, -1.6844287949950618],
      'left_2'   : [0.8651651740074158, 1.026233196258545, 1.607611894607544, -1.448077917098999, -1.5155730247497559, 1.0860583782196045],
      'left_3'   : [0.8651651740074158, 1.026233196258545, 1.607611894607544, -1.448077917098999, -1.5155730247497559, 1.0860583782196045],
      'top_1'    : [0.06580003696516191, 0.610865, 1.682566763564324, -0.11621634143272604, -1.5237012151902027, -0.014641551594950784],
      'top_2'    : [0.0076699042692780495, 0.45405831933021545, 1.4649516344070435, 0.02454369328916073, -1.3192235231399536, 0.0015339808305725455],
      'top_3'    : [0.05842017661375378, -0.01091474055365706, 0.508682744553706, -0.018383082431995736, -1.1322537449334422, 0.022251283194952686],
      'bottom_1' : [0.13606868986112158, 0.5215120491717602, -0.6259154415618842, 0.13400943020992345, 1.8297667107528208, 0.02169278611695778],
      'bottom_2' : [0.13788992401193792, 0.674550873909903, -0.551118472069638, 0.13742538797703818, 1.8170618246483157, 0.021266569887058374],
      'bottom_3' : [0.14705021881303204, 0.8619704018470852, -0.41301399722681215, 0.1753433807927659, 1.830020125895237, 0.021073375261441003],
      'right_1'  : [-0.725572943687439, 0.2914563715457916, 0.4080389142036438, -1.6275537014007568, 1.3299614191055298, 1.7824857234954834],
      'right_2'  : [-0.725572943687439, 0.41264083981513977, 0.5936505794525146, -1.6275537014007568, 1.3284274339675903, 1.7824857234954834],
      'right_3'  : [-0.725572943687439, 0.7516506314277649, 1.0676506757736206, -1.6306216716766357, 1.3284274339675903, 1.9358837604522705],
      'sleep'    : sleep_pose
    }
  ## Sleep pose
  pose_goal = geometry_msgs.msg.Pose()
  pose_goal.position.x =  0.0811047406103
  pose_goal.position.y =  -1.34901728646e-05
  pose_goal.position.z =  0.128741153434
  pose_goal.orientation.x = -1.40023979928e-05
  pose_goal.orientation.y = 0.290732882379
  pose_goal.orientation.z = -6.39239167946e-05
  pose_goal.orientation.w = 0.956804257318
      # arm_control.set_go_pose_goal(pose_goal)

  # joints_goal_dict = joints_goal_dict_15mm
  try:
    disp = pygame.display
    screen = disp.set_mode((800, 600))
    screen.fill(white)
    disp.set_caption("Arm Control ")

    ## rendering window title and exit button
    title = "Arm Control"
    pygame_render_text(screen, title, (350,20), orange, 50)
    pygame.draw.rect(screen, orange, no_button)
    pygame_render_text(screen, 'Exit', (500, 505))

    ## adding virtual base of the robot
    box_name = "base_box"
    res = arm_control.add_box(box_name, [0, 0, -0.01],(0.6, 0.6, 0.02))

    
    # actions = ['start', 'left_1', 'left_2', 'left_3', 'start', 'top_1', 'top_2', 'bottom_1', 'bottom_2', 'bottom_3', 'right_1', 'right_2', 'right_3']
    actions = ['start', 'left_1', 'left_3', 'start', 'top_1', 'bottom_1',  'right_1']
    
    device_status_srv = rospy.ServiceProxy('/device_status', Capture) 
    
    # print("============ Press `Enter` to begin calibration ============")    
    
    # temp = raw_input()   

    text = "Click on \"yes\" below to start calibration procedure "
    pygame_render_text(screen, text, (150,200), green, 30)
    is_device_ready = capture_calibrate_continue()

    while is_device_ready:
      ## check if service is available
      if check_service('/device_status'):
        break

      relpace_rect =  pygame.Rect(0, 60, 800, 540)
      pygame.draw.rect(screen, white, relpace_rect)
      heading = "Waiting for device status..."
      pygame_render_text(screen, heading, (220,70), black, 30)
      pygame.draw.rect(screen, orange, no_button)
      pygame_render_text(screen, 'Exit', (500, 505))
      disp.update()
  
      resp = device_status_srv("checking_device_status")
      if capture_exit():
        is_device_ready = False
        break

      if resp is not None:
        if resp.success:
          relpace_rect =  pygame.Rect(100, 70, 650, 35)
          pygame.draw.rect(screen, white, relpace_rect)
          dev = "Device with Mx id: " +  resp.error + " Connected"
          pygame_render_text(screen, dev, (200,70), black, 30)
          disp.update()
      else:
        print("couldn't reach device status service")
        relpace_rect =  pygame.Rect(100, 70, 650, 35)
        pygame.draw.rect(screen, white, relpace_rect)
        dev = "couldn't reach device status service"
        pygame_render_text(screen, dev, (200,70), black, 30)
        is_device_ready = capture_calibrate_continue()
        continue

      if capture_exit():
        is_device_ready = False
        break

      if not is_device_ready:
        break

      capture_count = 0
      while capture_count < len(actions):
        act = actions[capture_count]        

        ## UI update
        relpace_rect =  pygame.Rect(150, 115, 300, 35)
        pygame.draw.rect(screen, white, relpace_rect)
        dev = "capturing - " + str(capture_count)
        pygame_render_text(screen, dev, (270,115), black, 30)
        disp.update()
        ## check if service is available
        if check_service('/capture_checkerboard'):
          is_device_ready = False
          break
        
        ## arm control
        arm_control.go_to_next_joint_state(joints_goal_dict[act])
        time.sleep(delay)
        ## calling capture service
        capture_resp = arm_control.capture_srv_client_handler(act)
        ## Evaulating response after capture
        if capture_resp is not None:
          ## increasing capture count if capture is success
          if capture_resp.success:
            capture_count += 1
          ## error on capture fail
          else:
            pygame.draw.rect(screen, white, relpace_rect)
            dev = "calibration board is out of camera's viewscope." 
            pygame_render_text(screen, dev, (270,115), red, 30)
            dev = "Adjust the calibration board position and restart"
            pygame_render_text(screen, dev, (270,145), red, 30)
            disp.update()
            break
        ## Service fails to send response when service 
        ## node crashes or fails to gets stuck
        # else:
        #   pygame.draw.rect(screen, white, relpace_rect)
        #   dev = "calibration node failed!! device lost!." 
        #   pygame_render_text(screen, dev, (270,115), red, 30)
        #   dev = "Restart the calibration node"
        #   pygame_render_text(screen, dev, (270,145), red, 30)
        #   disp.update()
        #   break
            
      ## reset position to start
      print("Stand pose -->")
      arm_control.go_to_next_joint_state(joints_goal_dict['start'])
      print("Stand pose finished-->")

      ## breaking incase exit was pressed during capturing service above
      if not is_device_ready:
        break
      
      ## Sleep pose
      # pose_goal.position.x =  0.0811047406103
      # pose_goal.position.y =  -1.34901728646e-05
      # pose_goal.position.z =  0.128741153434
      # pose_goal.orientation.x = -1.40023979928e-05
      # pose_goal.orientation.y = 0.290732882379
      # pose_goal.orientation.z = -6.39239167946e-05
      # pose_goal.orientation.w = 0.956804257318
      # arm_control.set_go_pose_goal(pose_goal)

      ## capture capture service was succesfull in capturing all services then start calibration service
      if capture_count == len(actions): 
        ## UI rendering
        relpace_rect =  pygame.Rect(100, 115, 400, 35)
        pygame.draw.rect(screen, white, relpace_rect)
        dev = "Starting calibration service"
        pygame_render_text(screen, dev, (200,115), black, 30)
        disp.update()
        # checking service available
        if check_service('/calibrate_stereo'):
          is_device_ready = False
          break

        response = arm_control.calibrate_srv_client_handler()
        relpace_rect =  pygame.Rect(150, 115, 500, 35)
        pygame.draw.rect(screen, white, relpace_rect)
        if response is not None:
          if not response.success:
            print(response.error)
            print("Repeat the calibrtion by adusting the device or move to next device by marking this device")
            dev = "Calibration Failed!!  " + response.error
            pygame_render_text(screen, dev, (200,115), red, 30)
            
          else:
            dev = "Calibration data successfyully written to EEPROM!!"
            pygame_render_text(screen, dev, (200,115), green, 30)
        else:
            dev = "Calibration service failed. check calibration node error."
            pygame_render_text(screen, dev, (200,115), red, 30)
      
      change_device_render()
      is_device_ready = capture_calibrate_continue()

      # while True:
      #   key = raw_input("Change the device and please press 'Y/y' and press N/n to finish \n")
      
      #   if key == 'y' or key == 'Y':
      #     is_device_ready = True
      #     break
      #   elif key == 'n' or key == 'N':
      #     is_device_ready = False
      #     break
      #   else:
      #     print("Invalid key pressed!!")
    
    print "============ Python arm calibration complete! ============"
  except Exception as e :
    print("Warining ----------------------------------------------->")
    print(e)
    warnings.warn(str(e))
    print("~~~~~~~~~~~~~~~~~~EXIT~~~~~~~~~~~~~~~")
  except rospy.ROSInterruptException:  
    print("ROSInterruptException EERRRRROOORRR_----------------------------------------------")
  except KeyboardInterrupt:
    print("KeyboardInterrupt EERRRRROOORRR_----------------------------------------------")
    shutdown_handler()
  #   return
  print("Moving to sleep pose before finishinh----->")



  arm_control.set_go_pose_goal(pose_goal)

  arm_control.go_to_next_joint_state(sleep_pose)
  rospy.sleep(2)
  print("finished Moving to sleep pose before finishinh----->")

  rospy.signal_shutdown("Finished calibration")
  # del arm_control
  # sys.exit(0)

yes_button =  pygame.Rect(390, 400, 80, 45)
no_button =  pygame.Rect(490, 500, 80, 45)
sleep_pose = [0.05, -1.76, -1.55, 0.05, -0.8, 0.05]
arm_control = None

if __name__ == '__main__':
  main()
